# app/services/improved_quiz_generator.py - GENERADOR INTELIGENTE DE QUIZ CONTEXTUAL
import re
import random
import logging
from typing import Dict, List, Any, Tuple, Optional
from collections import Counter
import spacy
from datetime import datetime

logger = logging.getLogger(__name__)

class IntelligentQuizGenerator:
    """
    Generador inteligente de quiz que crea preguntas espec√≠ficas del contenido analizado
    """
    
    def __init__(self):
        self.nlp = self._load_spacy_model()
        self._setup_contextual_patterns()
        self._setup_question_templates()
        self._setup_domain_specific_patterns()
    
    def _load_spacy_model(self):
        """Carga modelo de spaCy para an√°lisis avanzado"""
        models_to_try = ["es_core_news_lg", "es_core_news_md", "es_core_news_sm"]
        
        for model_name in models_to_try:
            try:
                nlp = spacy.load(model_name)
                logger.info(f"‚úÖ Modelo spaCy cargado: {model_name}")
                return nlp
            except OSError:
                continue
        
        logger.warning("‚ö†Ô∏è No se pudo cargar modelo de spaCy, usando an√°lisis b√°sico")
        return None
    
    def _setup_contextual_patterns(self):
        """Configura patrones para extraer informaci√≥n contextual espec√≠fica"""
        self.content_extractors = {
            "fechas_historicas": r'\b(?:19[0-9]{2}|20[0-2][0-9])\b',
            "periodos": r'\b(?:siglo\s+[IVX]+|(?:primera|segunda)\s+guerra\s+mundial)\b',
            "personajes_historicos": r'\b(?:Hitler|Stalin|Roosevelt|Churchill|Mussolini|Franco)\b',
            "lugares_geograficos": r'\b(?:Europa|Asia|√Åfrica|Am√©rica|Alemania|Francia|Italia|Espa√±a|Polonia|URSS|Estados Unidos|Reino Unido)\b',
            "eventos_militares": r'\b(?:batalla|operaci√≥n|invasi√≥n|bombardeo|ofensiva|desembarco|blitzkrieg)\b',
            "conceptos_politicos": r'\b(?:fascismo|nazismo|comunismo|democracia|totalitarismo|propaganda)\b',
            "organizaciones": r'\b(?:Wehrmacht|SS|Gestapo|Luftwaffe|Sociedad de Naciones|ONU)\b',
            "consecuencias": r'\b(?:consecuencias?|efectos?|resultados?|impacto)\b',
            "causas": r'\b(?:causas?|origen|motivos?|razones?)\b'
        }
        
        # Patrones para extraer datos espec√≠ficos de la Segunda Guerra Mundial
        self.wwii_specific_patterns = {
            "fases_guerra": r'\b(?:1939-1941|1941-1943|1943-1945|fase inicial|punto de inflexi√≥n|contraofensiva)\b',
            "frentes": r'\b(?:frente occidental|frente oriental|teatro del pac√≠fico|frente africano)\b',
            "tecnologia_militar": r'\b(?:radar|tanque|submarino|avi√≥n|bomba at√≥mica|misil|V-2)\b',
            "ideologias": r'\b(?:Tercer Reich|Eje|Aliados|New Deal|Plan Marshall)\b',
            "tratados": r'\b(?:tratado|pacto|acuerdo|rendici√≥n|armisticio)\b'
        }
    
    def _setup_question_templates(self):
        """Configura plantillas inteligentes de preguntas por categor√≠a"""
        self.question_templates = {
            "cronologia": [
                "¬øEn qu√© a√±o {evento_especifico}?",
                "¬øCu√°ndo comenz√≥ {proceso_historico}?",
                "¬øQu√© per√≠odo abarca {evento_contexto}?",
                "¬øEn qu√© fase de la guerra ocurri√≥ {evento_militar}?",
                "¬øCu√°l fue la secuencia temporal de {eventos_relacionados}?"
            ],
            "personajes": [
                "¬øQu√© papel desempe√±√≥ {personaje} en {contexto_especifico}?",
                "¬øCu√°l fue la estrategia de {lider} durante {periodo}?",
                "¬øC√≥mo influy√≥ {personaje} en {evento_especifico}?",
                "¬øQu√© decisi√≥n tom√≥ {lider} respecto a {situacion}?",
                "¬øPor qu√© {personaje} fue importante para {resultado}?"
            ],
            "geografia": [
                "¬øD√≥nde se desarroll√≥ {evento_militar}?",
                "¬øQu√© pa√≠ses formaron {alianza_especifica}?",
                "¬øCu√°l fue la importancia estrat√©gica de {lugar}?",
                "¬øQu√© territorios conquist√≥ {pais} durante {periodo}?",
                "¬øPor qu√© {lugar} fue clave en {operacion_militar}?"
            ],
            "causas_consecuencias": [
                "¬øCu√°les fueron las principales causas de {evento}?",
                "¬øQu√© consecuencias tuvo {evento} para {region_grupo}?",
                "¬øPor qu√© {evento} cambi√≥ {aspecto_especifico}?",
                "¬øC√≥mo afect√≥ {evento} al desarrollo de {consecuencia}?",
                "¬øQu√© factores llevaron a {resultado_especifico}?"
            ],
            "conceptos": [
                "¬øQu√© caracteriz√≥ al {concepto_politico} durante {periodo}?",
                "¬øC√≥mo funcionaba {sistema_organizacion}?",
                "¬øEn qu√© consist√≠a la estrategia de {tactica_militar}?",
                "¬øQu√© principios defin√≠an {ideologia}?",
                "¬øCu√°l era el objetivo de {politica_estrategia}?"
            ],
            "comparacion": [
                "¬øQu√© diferencias hab√≠a entre {elemento1} y {elemento2}?",
                "¬øC√≥mo se comparaba {aspecto} de {pais1} con {pais2}?",
                "¬øEn qu√© se diferenciaron las estrategias de {lider1} y {lider2}?",
                "¬øQu√© ventajas ten√≠a {bando1} sobre {bando2}?",
                "¬øC√≥mo vari√≥ {aspecto} entre {periodo1} y {periodo2}?"
            ]
        }
    
    def _setup_domain_specific_patterns(self):
        """Configura patrones espec√≠ficos para diferentes dominios"""
        self.domain_patterns = {
            "segunda_guerra_mundial": {
                "eventos_clave": [
                    "invasi√≥n de Polonia", "batalla de Francia", "batalla de Inglaterra",
                    "operaci√≥n Barbarroja", "ataque a Pearl Harbor", "batalla de Stalingrado",
                    "desembarco de Normand√≠a", "bomba at√≥mica", "rendici√≥n de Alemania"
                ],
                "personajes_principales": [
                    "Adolf Hitler", "Winston Churchill", "Franklin Roosevelt", 
                    "Jos√© Stalin", "Benito Mussolini", "Charles de Gaulle"
                ],
                "conceptos_estrategicos": [
                    "Blitzkrieg", "guerra total", "resistencia", "colaboracionismo",
                    "genocidio", "holocausto", "guerra fr√≠a"
                ]
            }
        }
    
    def generate_contextual_quiz(self, text: str, num_questions: int = 5, 
                               difficulty: str = "medium") -> List[Dict[str, Any]]:
        """
        Genera quiz contextual inteligente basado en el contenido espec√≠fico del texto
        """
        logger.info(f"üéØ Generando quiz contextual de {num_questions} preguntas")
        
        # 1. An√°lizar contenido espec√≠fico del texto
        content_analysis = self._analyze_text_content(text)
        
        # 2. Extraer informaci√≥n factual espec√≠fica
        factual_data = self._extract_factual_information(text, content_analysis)
        
        # 3. Generar preguntas basadas en contenido real
        questions = []
        
        # Distribuir preguntas por categor√≠as
        categories = ["cronologia", "personajes", "geografia", "causas_consecuencias", "conceptos"]
        questions_per_category = max(1, num_questions // len(categories))
        
        for category in categories:
            if len(questions) >= num_questions:
                break
                
            category_questions = self._generate_category_questions(
                category, factual_data, content_analysis, difficulty, questions_per_category
            )
            questions.extend(category_questions)
        
        # Completar con preguntas adicionales si es necesario
        while len(questions) < num_questions:
            additional_question = self._generate_direct_content_question(
                text, factual_data, len(questions) + 1, difficulty
            )
            if additional_question:
                questions.append(additional_question)
            else:
                break
        
        # Validar y mejorar calidad de preguntas
        validated_questions = self._validate_and_improve_questions(questions, text)
        
        logger.info(f"‚úÖ Generadas {len(validated_questions)} preguntas contextuales")
        return validated_questions[:num_questions]
    
    def _analyze_text_content(self, text: str) -> Dict[str, Any]:
        """Analiza el contenido espec√≠fico del texto"""
        analysis = {
            "domain": "historia",
            "specific_topic": "segunda_guerra_mundial",
            "key_entities": [],
            "temporal_info": [],
            "geographical_info": [],
            "key_concepts": [],
            "main_themes": []
        }
        
        # Detectar dominio espec√≠fico
        if "segunda guerra mundial" in text.lower():
            analysis["specific_topic"] = "segunda_guerra_mundial"
        elif "primera guerra mundial" in text.lower():
            analysis["specific_topic"] = "primera_guerra_mundial"
        
        # Extraer entidades espec√≠ficas usando patrones
        for pattern_name, pattern in self.content_extractors.items():
            matches = list(set(re.findall(pattern, text, re.IGNORECASE)))
            if matches:
                analysis[pattern_name] = matches
        
        # Usar spaCy si est√° disponible para an√°lisis m√°s profundo
        if self.nlp:
            doc = self.nlp(text)
            
            # Extraer entidades nombradas
            for ent in doc.ents:
                if ent.label_ in ['PERSON', 'GPE', 'ORG', 'EVENT']:
                    analysis["key_entities"].append({
                        "text": ent.text,
                        "label": ent.label_,
                        "context": text[max(0, ent.start_char-50):ent.end_char+50]
                    })
        
        return analysis
    
    def _extract_factual_information(self, text: str, analysis: Dict) -> Dict[str, Any]:
        """Extrae informaci√≥n factual espec√≠fica del texto"""
        factual_data = {
            "dates": [],
            "people": [],
            "places": [],
            "events": [],
            "concepts": [],
            "relationships": [],
            "specific_facts": []
        }
        
        # Extraer fechas con contexto
        date_pattern = r'(\b(?:19[0-9]{2}|20[0-2][0-9])\b)'
        for match in re.finditer(date_pattern, text):
            date = match.group(1)
            context_start = max(0, match.start() - 100)
            context_end = min(len(text), match.end() + 100)
            context = text[context_start:context_end].strip()
            
            factual_data["dates"].append({
                "date": date,
                "context": context,
                "position": match.start()
            })
        
        # Extraer informaci√≥n espec√≠fica de WWII si es el tema
        if analysis.get("specific_topic") == "segunda_guerra_mundial":
            factual_data.update(self._extract_wwii_specific_facts(text))
        
        # Extraer relaciones causa-efecto
        factual_data["relationships"] = self._extract_causal_relationships(text)
        
        # Extraer hechos espec√≠ficos del texto (oraciones con informaci√≥n factual)
        factual_data["specific_facts"] = self._extract_specific_facts(text)
        
        return factual_data
    
    def _extract_wwii_specific_facts(self, text: str) -> Dict[str, Any]:
        """Extrae hechos espec√≠ficos sobre la Segunda Guerra Mundial"""
        wwii_facts = {
            "war_phases": [],
            "military_operations": [],
            "key_battles": [],
            "alliances": [],
            "technologies": [],
            "casualties": [],
            "political_changes": []
        }
        
        # Buscar informaci√≥n sobre fases de la guerra
        phase_patterns = {
            "inicio": r'(1939.*?(?:invasi√≥n|Polonia|comenz√≥|inici√≥))',
            "expansion": r'(1940.*?(?:Francia|Inglaterra|batalla))',
            "globalizacion": r'(1941.*?(?:Barbarroja|Pearl Harbor|mundial))',
            "cambio": r'(194[2-3].*?(?:Stalingrado|Alamein|cambio))',
            "final": r'(194[4-5].*?(?:Normand√≠a|rendici√≥n|final))'
        }
        
        for phase, pattern in phase_patterns.items():
            matches = re.findall(pattern, text, re.IGNORECASE | re.DOTALL)
            if matches:
                wwii_facts["war_phases"].append({
                    "phase": phase,
                    "description": matches[0][:200] + "..." if len(matches[0]) > 200 else matches[0]
                })
        
        # Extraer operaciones militares mencionadas
        military_ops = re.findall(r'\b(?:operaci√≥n|batalla de?|invasi√≥n de?|bombardeo de?)\s+[A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+)*\b', text, re.IGNORECASE)
        wwii_facts["military_operations"] = list(set(military_ops))
        
        return wwii_facts
    
    def _extract_causal_relationships(self, text: str) -> List[Dict[str, str]]:
        """Extrae relaciones de causa y efecto del texto"""
        relationships = []
        
        # Patrones de causalidad
        causal_patterns = [
            r'(?:debido a|por|a causa de)\s+([^.]{10,80})[^.]*(?:\.|\,)',
            r'([^.]{10,80})\s+(?:caus√≥|provoc√≥|llev√≥ a|result√≥ en)\s+([^.]{10,80})',
            r'(?:como consecuencia de|resultado de)\s+([^.]{10,80})[^.]*(?:\.|\,)',
            r'([^.]{10,80})\s+(?:tuvo como consecuencia|dio lugar a)\s+([^.]{10,80})'
        ]
        
        for pattern in causal_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple) and len(match) == 2:
                    relationships.append({
                        "cause": match[0].strip(),
                        "effect": match[1].strip()
                    })
                elif isinstance(match, str):
                    relationships.append({
                        "element": match.strip(),
                        "type": "causal_element"
                    })
        
        return relationships[:5]  # Limitar a 5 relaciones
    
    def _extract_specific_facts(self, text: str) -> List[Dict[str, str]]:
        """Extrae hechos espec√≠ficos y verificables del texto"""
        facts = []
        
        # Dividir en oraciones
        sentences = [s.strip() for s in re.split(r'[.!?]+', text) if len(s.strip()) > 30]
        
        # Buscar oraciones que contengan informaci√≥n factual espec√≠fica
        factual_indicators = [
            r'\b(?:fue|era|se desarroll√≥|ocurri√≥|comenz√≥|termin√≥|dur√≥)\b',
            r'\b(?:principalmente|especialmente|particularmente)\b',
            r'\b(?:primera|segunda|√∫ltima|mayor|menor)\b',
            r'\b(?:aproximadamente|cerca de|m√°s de|menos de)\s+\d+',
            r'\b(?:entre|desde|hasta|durante)\s+\d{4}'
        ]
        
        for sentence in sentences:
            factual_score = 0
            
            # Contar indicadores factuales
            for indicator in factual_indicators:
                if re.search(indicator, sentence, re.IGNORECASE):
                    factual_score += 1
            
            # Si tiene suficientes indicadores factuales, incluir
            if factual_score >= 2:
                facts.append({
                    "fact": sentence,
                    "score": factual_score,
                    "keywords": self._extract_keywords_from_sentence(sentence)
                })
        
        # Ordenar por puntuaci√≥n y retornar los mejores
        facts.sort(key=lambda x: x["score"], reverse=True)
        return facts[:8]
    
    def _extract_keywords_from_sentence(self, sentence: str) -> List[str]:
        """Extrae palabras clave de una oraci√≥n"""
        # Palabras importantes (no stop words)
        important_words = re.findall(r'\b[A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]{3,}\b', sentence)
        
        # Filtrar stop words
        stop_words = {'Este', 'Esta', 'Estos', 'Estas', 'Tambi√©n', 'Durante', 'Despu√©s', 'Antes'}
        keywords = [word for word in important_words if word not in stop_words]
        
        return keywords[:4]
    
    def _generate_category_questions(self, category: str, factual_data: Dict, 
                                   analysis: Dict, difficulty: str, max_questions: int) -> List[Dict]:
        """Genera preguntas para una categor√≠a espec√≠fica"""
        questions = []
        templates = self.question_templates.get(category, [])
        
        if category == "cronologia" and factual_data.get("dates"):
            questions.extend(self._generate_chronology_questions(factual_data, templates, difficulty))
        
        elif category == "personajes" and factual_data.get("people"):
            questions.extend(self._generate_people_questions(factual_data, templates, difficulty))
        
        elif category == "geografia" and factual_data.get("places"):
            questions.extend(self._generate_geography_questions(factual_data, templates, difficulty))
        
        elif category == "causas_consecuencias" and factual_data.get("relationships"):
            questions.extend(self._generate_causality_questions(factual_data, templates, difficulty))
        
        elif category == "conceptos":
            questions.extend(self._generate_concept_questions(factual_data, analysis, templates, difficulty))
        
        return questions[:max_questions]
    
    def _generate_chronology_questions(self, factual_data: Dict, templates: List[str], difficulty: str) -> List[Dict]:
        """Genera preguntas de cronolog√≠a espec√≠ficas"""
        questions = []
        dates_info = factual_data.get("dates", [])
        
        for date_info in dates_info[:2]:  # M√°ximo 2 preguntas de cronolog√≠a
            date = date_info["date"]
            context = date_info["context"]
            
            # Extraer evento del contexto
            event = self._extract_event_from_context(context)
            
            question_text = f"¬øEn qu√© a√±o {event}?"
            
            # Crear opciones
            correct_year = int(date)
            options = [
                str(correct_year),
                str(correct_year - 1),
                str(correct_year + 1),
                str(correct_year - 2) if correct_year > 1940 else str(correct_year + 2)
            ]
            random.shuffle(options)
            correct_answer = options.index(str(correct_year))
            
            explanation = f"Seg√∫n el texto, esto ocurri√≥ en {date}. {context[:100]}..."
            
            questions.append({
                "id": len(questions) + 1,
                "question": question_text,
                "options": options,
                "correct_answer": correct_answer,
                "explanation": explanation,
                "difficulty": difficulty,
                "category": "cronologia",
                "source_context": context
            })
        
        return questions
    
    def _extract_event_from_context(self, context: str) -> str:
        """Extrae descripci√≥n del evento del contexto"""
        # Buscar patrones de eventos
        event_patterns = [
            r'(invasi√≥n de [A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+)',
            r'(batalla de [A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+)',
            r'(operaci√≥n [A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+)',
            r'(ataque a [A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+)',
            r'(comenz√≥ la [a-z√°√©√≠√≥√∫√º√± ]+)',
            r'(se inici√≥ [a-z√°√©√≠√≥√∫√º√± ]+)'
        ]
        
        for pattern in event_patterns:
            match = re.search(pattern, context, re.IGNORECASE)
            if match:
                return match.group(1).lower()
        
        # Fallback: usar contexto general
        words = context.split()
        if len(words) > 10:
            return " ".join(words[5:10]).lower()
        
        return "ocurri√≥ este evento"
    
    def _generate_direct_content_question(self, text: str, factual_data: Dict, 
                                        question_id: int, difficulty: str) -> Optional[Dict]:
        """Genera pregunta directa basada en contenido espec√≠fico del texto"""
        
        # Usar hechos espec√≠ficos extra√≠dos
        specific_facts = factual_data.get("specific_facts", [])
        
        if not specific_facts:
            return None
        
        # Seleccionar hecho aleatorio
        fact_info = random.choice(specific_facts)
        fact_text = fact_info["fact"]
        keywords = fact_info["keywords"]
        
        # Crear pregunta basada en el hecho
        if keywords:
            main_keyword = keywords[0]
            question_text = f"Seg√∫n el texto, ¬øqu√© informaci√≥n es correcta sobre {main_keyword.lower()}?"
        else:
            question_text = "¬øCu√°l de las siguientes afirmaciones es correcta seg√∫n el texto?"
        
        # Crear opciones
        correct_option = fact_text[:100] + "..." if len(fact_text) > 100 else fact_text
        
        # Generar distractores inteligentes
        distractors = self._generate_intelligent_distractors(fact_text, keywords, text)
        
        options = [correct_option] + distractors[:3]
        random.shuffle(options)
        correct_answer = options.index(correct_option)
        
        explanation = f"Esta informaci√≥n se encuentra directamente en el texto: '{fact_text[:150]}...'"
        
        return {
            "id": question_id,
            "question": question_text,
            "options": options,
            "correct_answer": correct_answer,
            "explanation": explanation,
            "difficulty": difficulty,
            "category": "contenido_directo",
            "source_fact": fact_text
        }
    
    def _generate_intelligent_distractors(self, correct_fact: str, keywords: List[str], full_text: str) -> List[str]:
        """Genera distractores inteligentes pero incorrectos"""
        distractors = []
        
        # Tipo 1: Modificar fechas/n√∫meros en la respuesta correcta
        modified_fact = correct_fact
        for year in re.findall(r'\b\d{4}\b', correct_fact):
            wrong_year = str(int(year) + random.choice([-1, 1, -2, 2]))
            modified_fact = modified_fact.replace(year, wrong_year)
        
        if modified_fact != correct_fact:
            distractors.append(modified_fact[:100] + "..." if len(modified_fact) > 100 else modified_fact)
        
        # Tipo 2: Usar informaci√≥n de otras partes del texto pero en contexto incorrecto
        other_sentences = [s.strip() for s in re.split(r'[.!?]+', full_text) 
                          if len(s.strip()) > 30 and s.strip() != correct_fact.strip()]
        
        if other_sentences:
            distractor_sentence = random.choice(other_sentences)
            distractors.append(distractor_sentence[:100] + "..." if len(distractor_sentence) > 100 else distractor_sentence)
        
        # Tipo 3: Crear afirmaciones falsas pero plausibles
        generic_distractors = [
            "Una afirmaci√≥n que contradice la informaci√≥n presentada en el texto",
            "Una interpretaci√≥n que no tiene fundamento en el contenido analizado",
            "Una conclusi√≥n que no est√° respaldada por las fuentes hist√≥ricas mencionadas"
        ]
        
        while len(distractors) < 3:
            if generic_distractors:
                distractors.append(generic_distractors.pop(0))
            else:
                distractors.append("Una informaci√≥n que no aparece en el texto")
        
        return distractors
    
    def _validate_and_improve_questions(self, questions: List[Dict], original_text: str) -> List[Dict]:
        """Valida y mejora la calidad de las preguntas generadas"""
        improved_questions = []
        
        for question in questions:
            # Validar que la pregunta tenga sentido
            if self._is_valid_question(question, original_text):
                # Mejorar opciones si es necesario
                improved_question = self._improve_question_quality(question, original_text)
                improved_questions.append(improved_question)
        
        return improved_questions
    
    def _is_valid_question(self, question: Dict, text: str) -> bool:
        """Valida si una pregunta es de buena calidad"""
        
        # Verificar que la pregunta no est√© vac√≠a
        if not question.get("question") or len(question["question"]) < 10:
            return False
        
        # Verificar que tenga opciones v√°lidas
        options = question.get("options", [])
        if len(options) != 4:
            return False
        
        # Verificar que las opciones no sean todas iguales
        if len(set(options)) < 4:
            return False
        
        # Verificar que la respuesta correcta est√© dentro del rango
        correct_answer = question.get("correct_answer")
        if correct_answer is None or correct_answer < 0 or correct_answer >= len(options):
            return False
        
        return True
    
    def _improve_question_quality(self, question: Dict, text: str) -> Dict:
        """Mejora la calidad de una pregunta espec√≠fica"""
        
        # Mejorar la formulaci√≥n de la pregunta
        question_text = question["question"]
        
        # Asegurar que empiece con ¬ø y termine con ?
        if not question_text.startswith("¬ø"):
            question_text = "¬ø" + question_text.capitalize()
        if not question_text.endswith("?"):
            question_text += "?"
        
        question["question"] = question_text
        
        # Mejorar explicaci√≥n si es muy corta
        explanation = question.get("explanation", "")
        if len(explanation) < 50:
            question["explanation"] = self._generate_better_explanation(question, text)
        
        return question
    
    def _generate_better_explanation(self, question: Dict, text: str) -> str:
        """Genera una explicaci√≥n mejorada para la pregunta"""
        
        correct_option = question["options"][question["correct_answer"]]
        category = question.get("category", "general")
        
        explanations_by_category = {
            "cronologia": f"La respuesta correcta es '{correct_option[:50]}...' porque esta fecha se menciona espec√≠ficamente en el texto y corresponde al per√≠odo hist√≥rico analizado.",
            "personajes": f"La respuesta correcta es '{correct_option[:50]}...' porque el texto proporciona informaci√≥n espec√≠fica sobre este personaje y su papel en los eventos descritos.",
            "geografia": f"La respuesta correcta es '{correct_option[:50]}...' porque el texto hace referencia espec√≠fica a este lugar y su importancia en el contexto hist√≥rico.",
            "causas_consecuencias": f"La respuesta correcta es '{correct_option[:50]}...' porque el texto establece claramente esta relaci√≥n causal entre los eventos descritos.",
            "conceptos": f"La respuesta correcta es '{correct_option[:50]}...' porque el texto define y explica este concepto en el contexto del tema analizado.",
            "contenido_directo": f"La respuesta correcta es '{correct_option[:50]}...' porque esta informaci√≥n se encuentra directamente en el contenido del texto analizado."
        }
        
        return explanations_by_category.get(category, 
                                          f"La respuesta correcta se basa en la informaci√≥n espec√≠fica proporcionada en el texto: '{correct_option[:50]}...'")
    
    def generate_quiz_with_enhanced_context(self, text: str, key_concepts: List[str], 
                                          num_questions: int = 5, difficulty: str = "medium") -> Dict[str, Any]:
        """
        Funci√≥n principal mejorada que integra generaci√≥n contextual con conceptos clave
        """
        logger.info(f"üöÄ Generando quiz contextual mejorado con {num_questions} preguntas")
        
        try:
            # Generar preguntas contextuales
            contextual_questions = self.generate_contextual_quiz(text, num_questions, difficulty)
            
            # Si no se generaron suficientes preguntas contextuales, completar con conceptos clave
            if len(contextual_questions) < num_questions:
                remaining = num_questions - len(contextual_questions)
                concept_questions = self._generate_concept_based_questions(
                    text, key_concepts, remaining, difficulty
                )
                contextual_questions.extend(concept_questions)
            
            # Asegurar IDs √∫nicos
            for i, question in enumerate(contextual_questions):
                question["id"] = i + 1
            
            result = {
                "questions": contextual_questions[:num_questions],
                "success": True,
                "generation_method": "enhanced_contextual",
                "content_analysis": "specific_content_extraction"
            }
            
            logger.info(f"‚úÖ Quiz contextual generado exitosamente con {len(result['questions'])} preguntas")
            return result
            
        except Exception as e:
            logger.error(f"Error generando quiz contextual: {e}")
            # Fallback a generaci√≥n b√°sica
            return self._generate_fallback_quiz(text, key_concepts, num_questions, difficulty)
    
    def _generate_concept_based_questions(self, text: str, concepts: List[str], 
                                        num_questions: int, difficulty: str) -> List[Dict]:
        """Genera preguntas basadas en conceptos clave extra√≠dos"""
        questions = []
        
        for i, concept in enumerate(concepts[:num_questions]):
            # Buscar contexto del concepto en el texto
            concept_context = self._find_concept_context(concept, text)
            
            # Crear pregunta espec√≠fica del concepto
            question = self._create_concept_question(concept, concept_context, i + 1, difficulty)
            if question:
                questions.append(question)
        
        return questions
    
    def _find_concept_context(self, concept: str, text: str) -> str:
        """Encuentra el contexto espec√≠fico donde aparece un concepto"""
        
        # Buscar oraciones que contengan el concepto
        sentences = re.split(r'[.!?]+', text)
        
        for sentence in sentences:
            if concept.lower() in sentence.lower() and len(sentence.strip()) > 20:
                return sentence.strip()
        
        # Si no se encuentra contexto espec√≠fico, retornar una porci√≥n del texto
        return text[:200] + "..."
    
    def _create_concept_question(self, concept: str, context: str, 
                               question_id: int, difficulty: str) -> Optional[Dict]:
        """Crea pregunta espec√≠fica basada en un concepto y su contexto"""
        
        # Plantillas espec√≠ficas para conceptos
        concept_templates = [
            f"Seg√∫n el texto, ¬øcu√°l es la caracter√≠stica principal de {concept}?",
            f"¬øC√≥mo se describe {concept} en el contenido analizado?",
            f"¬øQu√© papel desempe√±a {concept} seg√∫n la informaci√≥n presentada?",
            f"¬øCu√°l es la importancia de {concept} en el contexto del tema?",
            f"Seg√∫n el texto, ¬øqu√© aspectos definen a {concept}?"
        ]
        
        question_text = random.choice(concept_templates)
        
        # Crear respuesta correcta basada en el contexto
        if len(context) > 50:
            correct_answer = context[:80] + "..." if len(context) > 80 else context
        else:
            correct_answer = f"Lo que se describe espec√≠ficamente en el texto sobre {concept}"
        
        # Crear distractores
        distractors = [
            f"Una caracter√≠stica que no se menciona en el texto sobre {concept}",
            f"Una interpretaci√≥n incorrecta del rol de {concept}",
            f"Una informaci√≥n que contradice lo expuesto sobre {concept}"
        ]
        
        # Combinar opciones
        options = [correct_answer] + distractors
        random.shuffle(options)
        correct_index = options.index(correct_answer)
        
        explanation = f"La respuesta correcta se basa en la informaci√≥n espec√≠fica que el texto proporciona sobre {concept}: '{context[:100]}...'"
        
        return {
            "id": question_id,
            "question": question_text,
            "options": options,
            "correct_answer": correct_index,
            "explanation": explanation,
            "difficulty": difficulty,
            "category": "concepto_clave",
            "concept": concept
        }
    
    def _generate_fallback_quiz(self, text: str, concepts: List[str], 
                              num_questions: int, difficulty: str) -> Dict[str, Any]:
        """Genera quiz de respaldo cuando falla el m√©todo principal"""
        
        logger.warning("Usando generaci√≥n de quiz de respaldo")
        
        questions = []
        
        # Usar m√©todo simplificado pero funcional
        for i in range(num_questions):
            concept = concepts[i % len(concepts)] if concepts else f"concepto {i+1}"
            
            question = {
                "id": i + 1,
                "question": f"¬øCu√°l es la informaci√≥n m√°s relevante sobre {concept} seg√∫n el texto?",
                "options": [
                    f"La informaci√≥n espec√≠fica que se presenta sobre {concept} en el contenido",
                    f"Una interpretaci√≥n que no est√° en el texto sobre {concept}",
                    f"Una conclusi√≥n no respaldada por el contenido sobre {concept}",
                    f"Una informaci√≥n contradictoria al texto sobre {concept}"
                ],
                "correct_answer": 0,
                "explanation": f"La respuesta se basa en la informaci√≥n espec√≠fica que el texto proporciona sobre {concept}.",
                "difficulty": difficulty,
                "category": "fallback"
            }
            
            questions.append(question)
        
        return {
            "questions": questions,
            "success": True,
            "generation_method": "fallback",
            "note": "Generaci√≥n simplificada por problemas en el m√©todo principal"
        }

# Funci√≥n auxiliar para calcular relevancia
def calculate_question_relevance(question: Dict, text: str, concepts: List[str]) -> float:
    """Calcula la relevancia de una pregunta basada en el contenido"""
    
    relevance_score = 0.0
    question_text = question.get("question", "").lower()
    
    # Puntos por mencionar conceptos clave
    for concept in concepts:
        if concept.lower() in question_text:
            relevance_score += 0.3
    
    # Puntos por categor√≠a espec√≠fica
    category = question.get("category", "")
    if category in ["cronologia", "personajes", "contenido_directo"]:
        relevance_score += 0.4
    
    # Puntos por tener contexto fuente
    if question.get("source_context") or question.get("source_fact"):
        relevance_score += 0.3
    
    return min(relevance_score, 1.0)

# Funci√≥n para mejorar preguntas existentes
def enhance_existing_questions(questions: List[Dict], text: str, concepts: List[str]) -> List[Dict]:
    """Mejora preguntas existentes con informaci√≥n contextual"""
    
    enhanced_questions = []
    
    for question in questions:
        enhanced_question = question.copy()
        
        # Mejorar explicaci√≥n con contexto espec√≠fico
        if len(enhanced_question.get("explanation", "")) < 100:
            enhanced_question["explanation"] = generate_contextual_explanation(
                enhanced_question, text, concepts
            )
        
        # Mejorar opciones para que sean m√°s espec√≠ficas
        enhanced_question["options"] = improve_question_options(
            enhanced_question["options"], text
        )
        
        enhanced_questions.append(enhanced_question)
    
    return enhanced_questions

def generate_contextual_explanation(question: Dict, text: str, concepts: List[str]) -> str:
    """Genera explicaci√≥n contextual para una pregunta"""
    
    correct_option = question["options"][question["correct_answer"]]
    
    # Buscar evidencia en el texto
    text_lower = text.lower()
    option_lower = correct_option.lower()
    
    # Buscar palabras clave de la opci√≥n en el texto
    option_words = [word for word in option_lower.split() if len(word) > 3]
    
    evidence_sentences = []
    sentences = re.split(r'[.!?]+', text)
    
    for sentence in sentences:
        sentence_lower = sentence.lower()
        word_matches = sum(1 for word in option_words if word in sentence_lower)
        
        if word_matches >= 2 and len(sentence.strip()) > 30:
            evidence_sentences.append(sentence.strip())
    
    if evidence_sentences:
        evidence = evidence_sentences[0][:150] + "..."
        return f"La respuesta correcta es '{correct_option[:50]}...' porque el texto establece: '{evidence}'"
    
    return f"La respuesta correcta es '{correct_option[:50]}...' bas√°ndose en la informaci√≥n espec√≠fica proporcionada en el contenido del texto."

def improve_question_options(options: List[str], text: str) -> List[str]:
    """Mejora las opciones de una pregunta para que sean m√°s espec√≠ficas"""
    
    improved_options = []
    
    for option in options:
        # Si la opci√≥n es muy gen√©rica, hacerla m√°s espec√≠fica
        if "informaci√≥n" in option.lower() and "texto" in option.lower():
            # Intentar hacer la opci√≥n m√°s espec√≠fica usando informaci√≥n del texto
            improved_option = make_option_more_specific(option, text)
            improved_options.append(improved_option)
        else:
            improved_options.append(option)
    
    return improved_options

def make_option_more_specific(generic_option: str, text: str) -> str:
    """Hace una opci√≥n gen√©rica m√°s espec√≠fica basada en el texto"""
    
    # Extraer informaci√≥n espec√≠fica del texto
    specific_elements = []
    
    # Buscar fechas
    dates = re.findall(r'\b\d{4}\b', text)
    if dates:
        specific_elements.extend(dates[:2])
    
    # Buscar lugares
    places = re.findall(r'\b[A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ú√ë][a-z√°√©√≠√≥√∫√º√±]+)*\b', text)
    if places:
        specific_elements.extend(places[:2])
    
    if specific_elements:
        element = random.choice(specific_elements)
        return generic_option.replace("informaci√≥n", f"informaci√≥n sobre {element}")
    
    return generic_option