#!/usr/bin/env python3
"""
test_improvements.py - Prueba las mejoras implementadas en el sistema

Ejecutar para verificar que las mejoras funcionan correctamente.
"""

import asyncio
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Texto de prueba de la Segunda Guerra Mundial
TEST_TEXT = """
La Segunda Guerra Mundial (1939-1945) fue el conflicto b√©lico m√°s devastador de la historia de la humanidad. 
Comenz√≥ el 1 de septiembre de 1939 cuando Alemania invadi√≥ Polonia, lo que llev√≥ a Francia y Reino Unido a declararle la guerra.

Adolf Hitler, l√≠der de la Alemania Nazi, buscaba expandir el territorio alem√°n y establecer un imperio que durara mil a√±os.
La guerra se caracteriz√≥ por innovaciones tecnol√≥gicas como los tanques, la aviaci√≥n de combate y posteriormente las armas nucleares.

Los principales bandos fueron las Potencias del Eje (Alemania, Italia, Jap√≥n) contra los Aliados (Reino Unido, Uni√≥n Sovi√©tica, Estados Unidos).
La Operaci√≥n Barbarroja en 1941 marc√≥ la invasi√≥n alemana a la Uni√≥n Sovi√©tica, abriendo el frente oriental.

El Holocausto represent√≥ el exterminio sistem√°tico de seis millones de jud√≠os europeos por parte del r√©gimen nazi.
La guerra termin√≥ en 1945 con la rendici√≥n de Alemania en mayo y de Jap√≥n en septiembre, tras las bombas at√≥micas de Hiroshima y Nagasaki.

Las consecuencias incluyeron la creaci√≥n de las Naciones Unidas, la Guerra Fr√≠a entre Estados Unidos y la Uni√≥n Sovi√©tica, 
y la descolonizaci√≥n de numerosos territorios en √Åfrica y Asia.
"""

async def test_improved_nlp_service():
    """Probar el servicio NLP mejorado"""
    logger.info("üîç PROBANDO: Servicio NLP mejorado")
    
    try:
        from app.services.nlp_service import NLPService
        nlp_service = NLPService()
        
        # Test 1: Extracci√≥n de conceptos clave mejorada
        logger.info("üìù Test 1: Extracci√≥n de conceptos clave...")
        concepts = nlp_service.extract_key_concepts(TEST_TEXT, max_concepts=8)
        
        logger.info(f"‚úÖ Conceptos extra√≠dos: {len(concepts)}")
        for i, concept in enumerate(concepts[:5], 1):
            logger.info(f"   {i}. {concept['concept']} (freq: {concept['frequency']}, rel: {concept['relevance']:.2f})")
        
        # Test 2: An√°lisis de complejidad mejorado
        logger.info("üìä Test 2: An√°lisis de complejidad...")
        analysis = nlp_service.analyze_text_complexity(TEST_TEXT)
        
        logger.info(f"‚úÖ An√°lisis completado:")
        logger.info(f"   Palabras: {analysis['word_count']}")
        logger.info(f"   Oraciones: {analysis['sentence_count']}")
        logger.info(f"   Diversidad l√©xica: {analysis.get('lexical_diversity', 'N/A')}")
        logger.info(f"   Complejidad: {analysis['complexity_level']}")
        
        return concepts
        
    except Exception as e:
        logger.error(f"‚ùå Error en NLP Service: {e}")
        return []

async def test_improved_ai_service(concepts):
    """Probar el servicio AI mejorado"""
    logger.info("ü§ñ PROBANDO: Servicio AI mejorado")
    
    try:
        from app.services.ai_service import AIService
        ai_service = AIService()
        
        # Test 1: Generaci√≥n de resumen mejorada
        logger.info("üìù Test 1: Generaci√≥n de resumen mejorada...")
        summary_result = await ai_service.generate_summary(TEST_TEXT, "medium")
        
        if summary_result["success"]:
            logger.info("‚úÖ Resumen generado exitosamente")
            logger.info(f"Resumen: {summary_result['summary'][:200]}...")
        else:
            logger.error(f"‚ùå Error en resumen: {summary_result.get('error')}")
        
        # Test 2: Generaci√≥n de quiz mejorada
        logger.info("‚ùì Test 2: Generaci√≥n de quiz mejorada...")
        concept_names = [c["concept"] for c in concepts] if concepts else ["Segunda Guerra Mundial", "Hitler", "Nazi"]
        
        quiz_result = await ai_service.generate_quiz(TEST_TEXT, concept_names, 3, "medium")
        
        if quiz_result["success"]:
            logger.info(f"‚úÖ Quiz generado con {len(quiz_result['questions'])} preguntas")
            for i, q in enumerate(quiz_result["questions"], 1):
                logger.info(f"   Pregunta {i}: {q['question'][:80]}...")
                logger.info(f"   Respuesta correcta: {q['options'][q['correct_answer']][:60]}...")
        else:
            logger.error(f"‚ùå Error en quiz: {quiz_result.get('error')}")
        
        # Test 3: Generaci√≥n de feedback mejorada
        logger.info("üí¨ Test 3: Generaci√≥n de feedback mejorada...")
        feedback = await ai_service.generate_feedback(2, 3, [2], concept_names[:3])
        
        logger.info(f"‚úÖ Feedback generado: {feedback[:150]}...")
        
        return quiz_result
        
    except Exception as e:
        logger.error(f"‚ùå Error en AI Service: {e}")
        return {"questions": [], "success": False}

def compare_results():
    """Comparar resultados antes y despu√©s de las mejoras"""
    logger.info("üìä COMPARACI√ìN DE MEJORAS:")
    logger.info("="*60)
    
    improvements = [
        "‚úÖ Extracci√≥n de conceptos m√°s inteligente (filtros avanzados)",
        "‚úÖ Res√∫menes con mejor estructura educativa",
        "‚úÖ Preguntas m√°s contextuales y relevantes",
        "‚úÖ Feedback personalizado y detallado",
        "‚úÖ Mejor procesamiento de texto en espa√±ol",
        "‚úÖ An√°lisis de complejidad m√°s preciso",
        "‚úÖ Distractores m√°s inteligentes en quizzes"
    ]
    
    for improvement in improvements:
        logger.info(f"   {improvement}")
    
    logger.info("\nüéØ BENEFICIOS ESPERADOS:")
    logger.info("   ‚Ä¢ Conceptos m√°s relevantes y menos ruido")
    logger.info("   ‚Ä¢ Res√∫menes m√°s educativos y estructurados")
    logger.info("   ‚Ä¢ Preguntas m√°s coherentes y √∫tiles")
    logger.info("   ‚Ä¢ Feedback que realmente ayuda al aprendizaje")

async def main():
    """Funci√≥n principal de prueba"""
    logger.info("üöÄ INICIANDO PRUEBAS DE MEJORAS AL SISTEMA")
    logger.info("="*60)
    
    # Probar NLP Service mejorado
    concepts = await test_improved_nlp_service()
    
    # Probar AI Service mejorado
    quiz_result = await test_improved_ai_service(concepts)
    
    # Mostrar comparaci√≥n
    compare_results()
    
    # Resultados finales
    logger.info("\n" + "="*60)
    logger.info("üèÅ RESULTADOS FINALES")
    logger.info("="*60)
    
    if concepts and quiz_result.get("success"):
        logger.info("üéâ ¬°√âXITO! Todas las mejoras funcionan correctamente")
        logger.info("‚úÖ El sistema ahora deber√≠a generar:")
        logger.info("   ‚Ä¢ Conceptos m√°s relevantes (ej: 'Segunda Guerra Mundial' vs 'Que')")
        logger.info("   ‚Ä¢ Res√∫menes m√°s educativos y estructurados")
        logger.info("   ‚Ä¢ Preguntas m√°s coherentes y contextuales")
        logger.info("   ‚Ä¢ Feedback m√°s √∫til y personalizado")
    else:
        logger.error("‚ùå Algunas mejoras no funcionaron correctamente")
        logger.error("üîß Revisa la instalaci√≥n y dependencias")
    
    logger.info("\nüìù PR√ìXIMOS PASOS:")
    logger.info("1. Reemplaza los archivos originales con las versiones mejoradas")
    logger.info("2. Instala el modelo de spaCy mejorado con el script")
    logger.info("3. Reinicia el servidor FastAPI")
    logger.info("4. Prueba con tu documento de la Segunda Guerra Mundial")

if __name__ == "__main__":
    asyncio.run(main())