#!/usr/bin/env python3
"""
test_final_quality.py - Test final de calidad perfecta del sistema
"""

import asyncio
import sys
from pathlib import Path

# Agregar el directorio del proyecto al path
sys.path.insert(0, str(Path.cwd()))

# Texto completo de la Segunda Guerra Mundial para pruebas
COMPLETE_WWII_TEXT = """
INTRODUCCI√ìN
La Segunda Guerra Mundial ha sido la peor guerra de la Historia de la Humanidad. En ella se
produjeron varias decenas de millones de muertos (no se puede calcular la cifra con exactitud). Adem√°s fue
la primera guerra en la que muri√≥ m√°s poblaci√≥n civil que militares. Las bajas se produjeron en el frente,
pero tambi√©n a causa de los bombardeos. Tampoco hay que olvidar el exterminio, el asesinato masivo de
comunidades enteras como los jud√≠os europeos en los campos de concentraci√≥n nazis.

CAUSAS DE LA SEGUNDA GUERRA MUNDIAL
Las consecuencias de la Crisis Econ√≥mica del 29 y la Gran Depresi√≥n: la crisis del modelo capitalista
en los a√±os 30 produjo miedo en las sociedades industrializadas, miedo en el futuro de su sistema
econ√≥mico y en la amenaza del sistema comunista que mostraba orgulloso su √©xito en la industrializaci√≥n
de la URSS durante los a√±os 30.

El revanchismo alem√°n e italiano contra el Tratado de Versalles. Hitler y Mussolini utilizaron el
descontento de sus respectivos pa√≠ses hacia el Tratado de Versalles para conseguir el poder. En los a√±os 30
ten√≠an que cumplir su palabra a quienes les apoyaron, de ah√≠ que Hitler fuera rompiendo una a una las
humillantes cl√°usulas de Versalles.

El expansionismo militar de las potencias fascistas: Alemania, Italia y Jap√≥n necesitaban ocupar
grandes territorios ricos en materias primas (especialmente petr√≥leo), para asegurar la prosperidad de sus
econom√≠as industriales. Hitler pretend√≠a la expansi√≥n de Alemania a costa de Rusia (Teor√≠a del Espacio Vital).

FASES DE LA SEGUNDA GUERRA MUNDIAL (1939-1945)
En la Primera Fase (1939-1942): Alemania y sus aliados (las potencias del Eje, Italia y Jap√≥n),
cosecharon un √©xito tras otro, derrotando a sus enemigos con invasiones r√°pidas (Blitzkrieg).

En la Segunda Fase (1943-1945): los aliados llevaron a cabo una lenta guerra de desgaste,
reconquistando los territorios ocupados por el Eje, que se defendi√≥ hasta el final a pesar de que la guerra
estaba perdida para el Eje desde 1943.

Primera Fase (1939-42)
1939, Septiembre: los alemanes y rusos ocupan Polonia de acuerdo con el Pacto Germano-Sovi√©tico
de No Agresi√≥n. Francia e Inglaterra permanecen inactivos y no atacan a Alemania.

1940: los alemanes invaden Dinamarca y Noruega. Gran Ofensiva del Oeste: los alemanes ocupan
Holanda, B√©lgica y Francia, y obligan al ej√©rcito brit√°nico a reembarcarse en Dunquerke. Inglaterra se queda
sola luchando contra Alemania.

1941: Operaci√≥n Barbarroja, los alemanes invaden la URSS con el objetivo de alcanzar Leningrado,
Mosc√∫ y Kiev antes del invierno. Ataque de Pearl Harbor: los japoneses atacan por sorpresa a la flota
americana en el Pac√≠fico, haciendo que EEUU entre en la guerra.

1942: Batalla de Stalingrado: tras penetrar profundamente en la URSS la ofensiva alemana se estanc√≥
delante de Mosc√∫ por la dureza del invierno y el contraataque ruso.

Segunda Fase (1943-45)
1943: Los aliados expulsan a los alemanes e italianos del Norte de Africa, y desembarcan en Italia.

1944: Desembarco de Normand√≠a, los ingleses y americanos desembarcan en Francia y abren un
segundo frente en Europa.

1945: Batalla de Berl√≠n: la lentitud de los aliados occidentales favorece el avance de los rusos
hasta Europa Central, √©stos asedian y conquistan Berl√≠n. Hitler se suicida y los nazis se rinden. Acaba la
guerra en Europa. Las bombas at√≥micas sobre Hiroshima y Nagasaki obligan a Jap√≥n a rendirse.

CONSECUENCIAS DE LA SEGUNDA GUERRA MUNDIAL
La consecuencia m√°s importante de la Segunda Guerra Mundial es que Europa queda relegada a un
segundo plano frente a las superpotencias: EEUU y URSS.

El mundo queda as√≠ dividido en dos partes: los pa√≠ses democr√°ticos-capitalistas, liderados por EEUU
y los pa√≠ses socialistas liderados por la URSS.

EEUU es nuevamente el gran vencedor de la guerra. Este pa√≠s se convierte en el l√≠der econ√≥mico
mundial y su propia propaganda le convierte en el modelo de la democracia frente al Fascismo y la
Amenaza Comunista.
"""

async def test_perfect_summary():
    """Prueba la generaci√≥n de res√∫menes perfectos"""
    print("üéØ PROBANDO: Generaci√≥n de res√∫menes PERFECTOS")
    print("=" * 70)
    
    try:
        from app.services.service_manager import service_manager
        
        ai_service = service_manager.ai_service
        
        print("üìù Generando resumen perfecto del texto completo de la Segunda Guerra Mundial...")
        
        result = await ai_service.generate_summary(COMPLETE_WWII_TEXT, "medium")
        
        if result["success"]:
            print(f"‚úÖ Resumen perfecto generado")
            print(f"ü§ñ Modelo usado: {result.get('model_used', 'unknown')}")
            print(f"üìÑ RESUMEN PERFECTO:")
            print("=" * 70)
            print(result["summary"])
            print("=" * 70)
            
            # Evaluar calidad perfecta
            quality_score = evaluate_perfect_summary_quality(result["summary"])
            print(f"üìä Puntuaci√≥n de calidad perfecta: {quality_score}/10")
            
            if quality_score >= 9:
                print("üèÜ ¬°CALIDAD PERFECTA ALCANZADA!")
            elif quality_score >= 7:
                print("‚≠ê Calidad excelente")
            else:
                print("üìà Calidad mejorable")
            
            return result["summary"], quality_score
        else:
            print(f"‚ùå Error generando resumen: {result.get('error', 'Error desconocido')}")
            return None, 0
            
    except Exception as e:
        print(f"‚ùå Error en test de resumen perfecto: {e}")
        return None, 0

async def test_perfect_quiz():
    """Prueba la generaci√≥n de quiz perfecto"""
    print("\nüéØ PROBANDO: Generaci√≥n de quiz PERFECTO")
    print("=" * 70)
    
    try:
        from app.services.service_manager import service_manager
        
        ai_service = service_manager.ai_service
        
        key_concepts = [
            "Segunda Guerra Mundial", "Hitler", "Stalin", "Pearl Harbor", 
            "Blitzkrieg", "Operaci√≥n Barbarroja", "Stalingrado", "Normand√≠a"
        ]
        
        print("‚ùì Generando quiz perfecto sobre la Segunda Guerra Mundial...")
        
        result = await ai_service.generate_quiz(COMPLETE_WWII_TEXT, key_concepts, 5, "medium")
        
        if result["success"] and result["questions"]:
            print(f"‚úÖ Quiz perfecto generado")
            print(f"ü§ñ Modelo usado: {result.get('model_used', 'unknown')}")
            print(f"üìä Preguntas generadas: {len(result['questions'])}")
            
            print("\nüéì PREGUNTAS PERFECTAS:")
            for i, question in enumerate(result["questions"], 1):
                print(f"\nüìù PREGUNTA {i}:")
                print(f"   ‚ùì {question['question']}")
                
                for j, option in enumerate(question['options']):
                    marker = "‚úÖ" if j == question['correct_answer'] else "   "
                    print(f"   {marker} {chr(65+j)}) {option}")
                
                print(f"   üí° Explicaci√≥n: {question['explanation']}")
            
            # Evaluar calidad perfecta del quiz
            quality_score = evaluate_perfect_quiz_quality(result["questions"])
            print(f"\nüìä Puntuaci√≥n de calidad perfecta del quiz: {quality_score}/10")
            
            if quality_score >= 9:
                print("üèÜ ¬°QUIZ PERFECTO ALCANZADO!")
            elif quality_score >= 7:
                print("‚≠ê Quiz de excelente calidad")
            else:
                print("üìà Quiz mejorable")
            
            return result["questions"], quality_score
        else:
            print(f"‚ùå Error generando quiz: {result.get('error', 'Error desconocido')}")
            return None, 0
            
    except Exception as e:
        print(f"‚ùå Error en test de quiz perfecto: {e}")
        return None, 0

async def test_perfect_feedback():
    """Prueba la generaci√≥n de feedback perfecto"""
    print("\nüéØ PROBANDO: Generaci√≥n de feedback PERFECTO")
    print("=" * 70)
    
    try:
        from app.services.service_manager import service_manager
        
        ai_service = service_manager.ai_service
        
        # Casos de prueba exhaustivos
        test_cases = [
            {
                "name": "Rendimiento Excepcional",
                "score": 5, "total": 5, 
                "concepts": ["Segunda Guerra Mundial", "Blitzkrieg"]
            },
            {
                "name": "Buen Rendimiento", 
                "score": 4, "total": 5,
                "concepts": ["Hitler", "Stalingrado"]
            },
            {
                "name": "Rendimiento Promedio",
                "score": 3, "total": 5,
                "concepts": ["Pearl Harbor", "Normand√≠a"]
            },
            {
                "name": "Necesita Mejora",
                "score": 2, "total": 5,
                "concepts": ["Operaci√≥n Barbarroja", "Nazi"]
            }
        ]
        
        feedback_scores = []
        
        for case in test_cases:
            print(f"\nüí¨ {case['name']}: {case['score']}/{case['total']} ({case['score']/case['total']*100:.0f}%)")
            
            feedback = await ai_service.generate_feedback(
                case["score"], case["total"], [], case["concepts"]
            )
            
            print(f"üìù Feedback perfecto generado:")
            print("-" * 50)
            # Mostrar primeras l√≠neas del feedback
            lines = feedback.split('\n')[:8]
            for line in lines:
                print(line)
            if len(feedback.split('\n')) > 8:
                print("...")
            print("-" * 50)
            
            # Evaluar calidad del feedback
            feedback_quality = evaluate_perfect_feedback_quality(feedback, case["score"], case["total"])
            feedback_scores.append(feedback_quality)
            print(f"üìä Calidad del feedback: {feedback_quality}/10")
        
        avg_feedback_quality = sum(feedback_scores) / len(feedback_scores)
        print(f"\nüìä Calidad promedio del feedback: {avg_feedback_quality:.1f}/10")
        
        if avg_feedback_quality >= 9:
            print("üèÜ ¬°FEEDBACK PERFECTO ALCANZADO!")
        elif avg_feedback_quality >= 7:
            print("‚≠ê Feedback de excelente calidad")
        else:
            print("üìà Feedback mejorable")
        
        return avg_feedback_quality >= 7
        
    except Exception as e:
        print(f"‚ùå Error en test de feedback perfecto: {e}")
        return False

def evaluate_perfect_summary_quality(summary: str) -> int:
    """Eval√∫a la calidad perfecta del resumen (0-10)"""
    score = 10
    
    # Verificar estructura educativa perfecta
    if "üìö" not in summary:
        score -= 1
    if "üîë" not in summary or "CONCEPTOS CLAVE" not in summary:
        score -= 1
    if "üìÖ" not in summary:
        score -= 1
    if "üë•" not in summary:
        score -= 1
    if "üìù" not in summary or "CONTENIDO PRINCIPAL" not in summary:
        score -= 2
    
    # Verificar contenido espec√≠fico de WWII
    required_concepts = ["Segunda Guerra Mundial", "1939", "1945"]
    for concept in required_concepts:
        if concept not in summary:
            score -= 1
    
    # Penalizar errores de calidad
    quality_issues = ["seguirra", "eusu", "histororia", "argentinos del eje"]
    for issue in quality_issues:
        if issue.lower() in summary.lower():
            score -= 2
    
    # Bonificar caracter√≠sticas de calidad perfecta
    if "Blitzkrieg" in summary:
        score += 1
    if any(name in summary for name in ["Hitler", "Stalin", "Churchill"]):
        score += 1
    if "superpotencias" in summary:
        score += 1
    
    return max(0, min(10, score))

def evaluate_perfect_quiz_quality(questions: list) -> int:
    """Eval√∫a la calidad perfecta del quiz (0-10)"""
    if not questions or len(questions) == 0:
        return 0
    
    score = 10
    
    # Verificar preguntas espec√≠ficas de WWII
    wwii_specific_count = 0
    for question in questions:
        question_text = question.get("question", "").lower()
        
        # Contar preguntas espec√≠ficas y de alta calidad
        if any(topic in question_text for topic in [
            "segunda guerra mundial", "hitler", "stalin", "pearl harbor",
            "blitzkrieg", "stalingrado", "normand√≠a", "1939", "1945"
        ]):
            wwii_specific_count += 1
        
        # Penalizar preguntas gen√©ricas de baja calidad
        if any(bad_phrase in question_text for bad_phrase in [
            "¬øqu√© es", "m√©todo tradicional", "proceso relacionado",
            "concepto central del texto sobre"
        ]):
            score -= 2
    
    # Bonificar por especificidad
    specificity_bonus = (wwii_specific_count / len(questions)) * 3
    score += specificity_bonus
    
    # Verificar calidad de opciones
    good_options_count = 0
    for question in questions:
        options = question.get("options", [])
        if any("invasi√≥n" in opt or "1939" in opt or "alemania" in opt.lower() for opt in options):
            good_options_count += 1
    
    options_bonus = (good_options_count / len(questions)) * 2
    score += options_bonus
    
    return max(0, min(10, score))

def evaluate_perfect_feedback_quality(feedback: str, score: int, total: int) -> int:
    """Eval√∫a la calidad perfecta del feedback (0-10)"""
    quality_score = 10
    
    # Verificar estructura
    required_elements = ["**", "üéØ", "üìä", "üí°"]
    for element in required_elements:
        if element not in feedback:
            quality_score -= 1
    
    # Verificar personalizaci√≥n
    percentage = (score / total) * 100
    if f"{score}/{total}" not in feedback:
        quality_score -= 1
    if f"{percentage:.1f}%" not in feedback:
        quality_score -= 1
    
    # Verificar longitud apropiada
    if len(feedback) < 200:
        quality_score -= 2
    elif len(feedback) > 1000:
        quality_score -= 1
    
    # Bonificar caracter√≠sticas de calidad
    if "AN√ÅLISIS" in feedback:
        quality_score += 1
    if "RECOMENDACIONES" in feedback or "ESTRATEGIAS" in feedback:
        quality_score += 1
    
    return max(0, min(10, quality_score))

async def main():
    """Funci√≥n principal del test de calidad perfecta"""
    print("üèÜ TEST DE CALIDAD PERFECTA - SISTEMA IA EDUCATIVA")
    print("=" * 80)
    print("üéØ Objetivo: Verificar que el sistema genere contenido de nivel universitario")
    print("üìñ Probando con texto acad√©mico completo de la Segunda Guerra Mundial")
    print()
    
    # Ejecutar todos los tests perfectos
    summary, summary_score = await test_perfect_summary()
    questions, quiz_score = await test_perfect_quiz()
    feedback_ok = await test_perfect_feedback()
    
    # Calcular puntuaci√≥n total
    total_score = (summary_score + quiz_score + (8 if feedback_ok else 4)) / 3
    
    # Resumen final
    print("\n" + "=" * 80)
    print("üèÜ EVALUACI√ìN FINAL DE CALIDAD PERFECTA")
    print("=" * 80)
    
    print(f"üìù Resumen: {summary_score}/10 - {'üèÜ PERFECTO' if summary_score >= 9 else '‚≠ê EXCELENTE' if summary_score >= 7 else 'üìà MEJORABLE'}")
    print(f"‚ùì Quiz: {quiz_score}/10 - {'üèÜ PERFECTO' if quiz_score >= 9 else '‚≠ê EXCELENTE' if quiz_score >= 7 else 'üìà MEJORABLE'}")
    print(f"üí¨ Feedback: {'üèÜ PERFECTO' if feedback_ok else 'üìà MEJORABLE'}")
    
    print(f"\nüìä PUNTUACI√ìN TOTAL: {total_score:.1f}/10")
    
    if total_score >= 9:
        print("\nüéâ ¬°SISTEMA DE CALIDAD PERFECTA ALCANZADO!")
        print("üèÜ Tu IA educativa genera contenido de nivel universitario")
        print("‚úÖ Listo para impresionar a profesores y estudiantes")
        print("üöÄ COMANDO PARA LANZAR: uvicorn app.main:app --reload")
    elif total_score >= 7:
        print("\n‚≠ê ¬°SISTEMA DE EXCELENTE CALIDAD!")
        print("üéì Tu IA educativa genera contenido profesional")
        print("‚úÖ Funcional y de alta calidad para uso educativo")
        print("üöÄ COMANDO PARA LANZAR: uvicorn app.main:app --reload")
    elif total_score >= 5:
        print("\nüìà Sistema funcional con calidad mejorable")
        print("üîß Algunas caracter√≠sticas necesitan ajustes")
        print("üí° Considera revisar la implementaci√≥n")
    else:
        print("\n‚ö†Ô∏è Sistema necesita mejoras significativas")
        print("üîß Revisa que el archivo enhanced_ai_service.py est√© actualizado")
        print("üí° Ejecuta: python fix_paths.py")
    
    # Mostrar ejemplo de resultado esperado
    if total_score >= 7:
        print("\n" + "=" * 80)
        print("üéì EJEMPLO DE CALIDAD ESPERADA:")
        print("=" * 80)
        
        print("üìù RESUMEN ESPERADO:")
        print("üìö **RESUMEN EDUCATIVO PERFECCIONADO**")
        print("üéØ **TEMA PRINCIPAL:** La Segunda Guerra Mundial")
        print("üîë **CONCEPTOS CLAVE:** Blitzkrieg, Operaci√≥n Barbarroja, Pearl Harbor")
        print("üìÖ **CRONOLOG√çA:** 1939 ‚Üí 1941 ‚Üí 1943 ‚Üí 1945")
        print("üë• **FIGURAS HIST√ìRICAS:** Hitler, Stalin, Churchill, Roosevelt")
        print("üìù **CONTENIDO PRINCIPAL:** [Resumen estructurado y coherente...]")
        print()
        
        print("‚ùì PREGUNTAS ESPERADAS:")
        print("¬øCu√°l fue el evento que marc√≥ el inicio oficial de la Segunda Guerra Mundial?")
        print("A) La invasi√≥n alemana de Polonia el 1 de septiembre de 1939 ‚úÖ")
        print("B) El ataque japon√©s a Pearl Harbor")
        print("C) La anexi√≥n de Austria por Alemania")
        print("D) El bombardeo de Londres")
        print()
        
        print("üí¨ FEEDBACK ESPERADO:")
        print("üéâ **¬°RENDIMIENTO EXCEPCIONAL!**")
        print("üèÜ **RESULTADO:** 5/5 respuestas correctas (100.0%)")
        print("üîç **AN√ÅLISIS DE RENDIMIENTO:** Has demostrado un dominio sobresaliente...")
        print("üíé **FORTALEZAS IDENTIFICADAS:** ‚Ä¢ Excelente manejo de...")
    
    return 0 if total_score >= 7 else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())