#!/usr/bin/env python3
"""
test_models_gui_unified.py - Interfaz gr√°fica unificada para mostrar todos los resultados de tests de IA

Ejecutar para ver todos los resultados de las pruebas en una sola vista.
"""

import asyncio
import time
import json
import logging
from pathlib import Path
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Textos de prueba (mismos del c√≥digo original)
TEST_TEXTS = {
    "ciencias": """
    La fotos√≠ntesis es el proceso biol√≥gico m√°s importante para la vida en la Tierra. 
    Las plantas utilizan la energ√≠a solar para convertir di√≥xido de carbono y agua en glucosa y ox√≠geno.
    Este proceso ocurre en los cloroplastos, espec√≠ficamente en los tilacoides donde se encuentra la clorofila.
    La fotos√≠ntesis consta de dos fases principales: las reacciones dependientes de luz y el ciclo de Calvin.
    Durante las reacciones de luz, se produce ATP y NADPH, mientras que en el ciclo de Calvin se fija el CO2.
    """,
    
    "historia": """
    La Revoluci√≥n Industrial comenz√≥ en Inglaterra a finales del siglo XVIII y transform√≥ completamente la sociedad.
    La invenci√≥n de la m√°quina de vapor por James Watt en 1769 revolucion√≥ el transporte y la producci√≥n.
    Las f√°bricas textiles fueron las primeras en adoptar la mecanizaci√≥n, especialmente en Manchester.
    La construcci√≥n de ferrocarriles conect√≥ ciudades y facilit√≥ el comercio de materias primas.
    Esta revoluci√≥n cambi√≥ las estructuras sociales, creando una nueva clase trabajadora urbana.
    """,
    
    "tecnologia": """
    La inteligencia artificial ha evolucionado dram√°ticamente en las √∫ltimas d√©cadas.
    Los algoritmos de machine learning permiten a las m√°quinas aprender patrones de datos.
    Las redes neuronales artificiales se inspiran en el funcionamiento del cerebro humano.
    El deep learning utiliza m√∫ltiples capas para procesar informaci√≥n compleja.
    Aplicaciones como el reconocimiento de voz y la visi√≥n por computadora son ya realidad.
    """
}

class AITestUnifiedGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ü§ñ Tests de IA Educativa - Vista Completa")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # Variables para almacenar resultados
        self.results = {}
        self.test_running = False
        
        self.setup_ui()
        
    def setup_ui(self):
        """Configurar la interfaz de usuario unificada"""
        
        # Frame principal con scroll
        canvas = tk.Canvas(self.root, bg='#f0f0f0')
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Configurar grid
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Frame principal de contenido
        main_frame = ttk.Frame(scrollable_frame, padding="15")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # T√≠tulo principal
        title_label = tk.Label(main_frame, text="ü§ñ TESTS DE IA EDUCATIVA - REPORTE COMPLETO", 
                              font=('Arial', 18, 'bold'), bg='#f0f0f0', fg='#2c3e50')
        title_label.pack(pady=(0, 20))
        
        # Panel de control
        control_frame = ttk.LabelFrame(main_frame, text="üéÆ Control de Tests", padding="15")
        control_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Bot√≥n y progreso en la misma fila
        control_row = ttk.Frame(control_frame)
        control_row.pack(fill=tk.X)
        
        self.run_button = ttk.Button(control_row, text="‚ñ∂Ô∏è Ejecutar Tests Completos", 
                                    command=self.run_tests_thread, width=25)
        self.run_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.progress_var = tk.StringVar(value="Listo para ejecutar tests")
        progress_label = ttk.Label(control_row, textvariable=self.progress_var)
        progress_label.pack(side=tk.LEFT, padx=(0, 10))
        
        self.progress_bar = ttk.Progressbar(control_row, mode='indeterminate', length=300)
        self.progress_bar.pack(side=tk.LEFT)
        
        # Resumen ejecutivo
        summary_frame = ttk.LabelFrame(main_frame, text="üìä Resumen Ejecutivo", padding="15")
        summary_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.summary_text = tk.Text(summary_frame, height=6, wrap=tk.WORD, 
                                   font=('Arial', 11), bg='#ecf0f1', fg='#2c3e50')
        self.summary_text.pack(fill=tk.X)
        
        # Crear todas las secciones de resultados
        self.create_all_sections(main_frame)
        
        # Informaci√≥n del sistema
        system_frame = ttk.LabelFrame(main_frame, text="üñ•Ô∏è Informaci√≥n del Sistema", padding="15")
        system_frame.pack(fill=tk.X, pady=(15, 0))
        
        self.system_info = tk.Text(system_frame, height=8, wrap=tk.WORD, 
                                  font=('Consolas', 10), bg='#2c3e50', fg='#ecf0f1')
        self.system_info.pack(fill=tk.X)
        
        # Mostrar informaci√≥n inicial
        self.show_initial_info()
        
        # Bind scroll del mouse
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
    def create_all_sections(self, parent):
        """Crear todas las secciones de resultados en una sola vista"""
        
        # Frame contenedor para todas las tablas
        tables_frame = ttk.Frame(parent)
        tables_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # Configurar grid para 2 columnas
        tables_frame.columnconfigure(0, weight=1)
        tables_frame.columnconfigure(1, weight=1)
        
        # 1. Dependencias (columna izquierda, fila 0)
        deps_frame = ttk.LabelFrame(tables_frame, text="üì¶ Dependencias", padding="10")
        deps_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 8), pady=(0, 10))
        self.deps_tree = self.create_compact_treeview(deps_frame, 
                                                     ["Componente", "Estado", "Versi√≥n"], height=6)
        
        # 2. Modelos (columna derecha, fila 0)
        models_frame = ttk.LabelFrame(tables_frame, text="ü§ñ Modelos", padding="10")
        models_frame.grid(row=0, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(8, 0), pady=(0, 10))
        self.models_tree = self.create_compact_treeview(models_frame, 
                                                       ["Modelo", "Estado", "Tiempo"], height=6)
        
        # 3. Res√∫menes (columna izquierda, fila 1)
        summary_frame = ttk.LabelFrame(tables_frame, text="üìù Res√∫menes", padding="10")
        summary_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 8), pady=(0, 10))
        self.summary_tree = self.create_compact_treeview(summary_frame, 
                                                        ["Tema", "Estado", "Tiempo", "Longitud"], height=6)
        
        # 4. Quizzes (columna derecha, fila 1)
        quiz_frame = ttk.LabelFrame(tables_frame, text="‚ùì Quizzes", padding="10")
        quiz_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(8, 0), pady=(0, 10))
        self.quiz_tree = self.create_compact_treeview(quiz_frame, 
                                                     ["Tema", "Estado", "Preguntas", "Tiempo"], height=6)
        
        # 5. Feedback (centrado, fila 2, ocupando ambas columnas)
        feedback_frame = ttk.LabelFrame(tables_frame, text="üí¨ Feedback", padding="10")
        feedback_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        self.feedback_tree = self.create_compact_treeview(feedback_frame, 
                                                         ["Caso", "Puntuaci√≥n", "Estado", "Tiempo"], height=6)
        
    def create_compact_treeview(self, parent, columns, height=8):
        """Crear un treeview compacto"""
        
        tree = ttk.Treeview(parent, columns=columns, show='headings', height=height)
        
        # Configurar columnas con anchos optimizados
        column_widths = {
            "Componente": 120, "Estado": 100, "Versi√≥n": 100,
            "Modelo": 120, "Tiempo": 80,
            "Tema": 100, "Longitud": 80, "Preguntas": 80,
            "Caso": 120, "Puntuaci√≥n": 100
        }
        
        for col in columns:
            tree.heading(col, text=col)
            width = column_widths.get(col, 100)
            tree.column(col, width=width, anchor=tk.CENTER, minwidth=80)
        
        # Scrollbar vertical
        scrollbar = ttk.Scrollbar(parent, orient=tk.VERTICAL, command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack con scrollbar
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        return tree
        
    def show_initial_info(self):
        """Mostrar informaci√≥n inicial del sistema"""
        info = f"""üñ•Ô∏è  Sistema: {tk.TkVersion} (Tkinter)
üìÖ  Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìÅ  Directorio: {Path.cwd()}
üîß  Python: Disponible
‚ö°  Estado: Listo para ejecutar tests

üí° Presiona 'Ejecutar Tests Completos' para comenzar las pruebas
üéØ Todos los resultados se mostrar√°n en esta √∫nica vista para facilitar la captura de pantalla
"""
        self.system_info.delete(1.0, tk.END)
        self.system_info.insert(tk.END, info)
        
        # Resumen inicial
        initial_summary = """üéØ SISTEMA DE TESTS DE IA EDUCATIVA - VISTA UNIFICADA

Este reporte mostrar√° en una sola pantalla:
‚Ä¢ ‚úÖ Estado de dependencias y librer√≠as
‚Ä¢ ü§ñ Carga y funcionamiento de modelos de IA  
‚Ä¢ üìù Generaci√≥n de res√∫menes autom√°ticos
‚Ä¢ ‚ùì Creaci√≥n de quizzes inteligentes
‚Ä¢ üí¨ Sistema de retroalimentaci√≥n personalizada

Perfecto para tomar una captura de pantalla completa del estado del sistema."""
        
        self.summary_text.delete(1.0, tk.END)
        self.summary_text.insert(tk.END, initial_summary)
        
    def run_tests_thread(self):
        """Ejecutar tests en un hilo separado"""
        if self.test_running:
            return
            
        self.test_running = True
        self.run_button.config(state='disabled', text="‚è≥ Ejecutando Tests...")
        self.progress_bar.start()
        
        thread = threading.Thread(target=self.run_tests_async)
        thread.daemon = True
        thread.start()
        
    def run_tests_async(self):
        """Ejecutar tests de forma as√≠ncrona"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            results = loop.run_until_complete(self.run_full_test())
            self.results = results
            
            # Actualizar interfaz en el hilo principal
            self.root.after(0, self.update_all_results)
            
        except Exception as e:
            logger.error(f"Error ejecutando tests: {e}")
            self.root.after(0, lambda: self.show_error(str(e)))
        finally:
            self.root.after(0, self.test_completed)
            
    def test_completed(self):
        """Limpiar interfaz cuando los tests terminan"""
        self.test_running = False
        self.run_button.config(state='normal', text="‚úÖ Tests Completados - Ejecutar de Nuevo")
        self.progress_bar.stop()
        self.progress_var.set("‚úÖ Todos los tests completados exitosamente")
        
    def show_error(self, error_msg):
        """Mostrar error en la interfaz"""
        messagebox.showerror("Error", f"Error ejecutando tests:\n{error_msg}")
        
    def update_all_results(self):
        """Actualizar toda la interfaz con los resultados"""
        if not self.results:
            return
            
        # Actualizar todas las secciones
        self.update_dependencies_section()
        self.update_models_section()
        self.update_summary_section()
        self.update_quiz_section()
        self.update_feedback_section()
        
        # Actualizar resumen ejecutivo
        self.update_executive_summary()
        
        # Actualizar informaci√≥n del sistema
        self.update_system_info()
        
    def update_dependencies_section(self):
        """Actualizar secci√≥n de dependencias"""
        # Limpiar
        for item in self.deps_tree.get_children():
            self.deps_tree.delete(item)
            
        deps_data = self.results.get("dependencies", {})
        
        for dep, info in deps_data.items():
            if dep == "gpu":
                status = "‚úÖ Disponible" if info.get("available") else "‚ö†Ô∏è No disponible"
                version = info.get("name", "CPU")[:15] + "..." if len(info.get("name", "CPU")) > 15 else info.get("name", "CPU")
                self.deps_tree.insert("", tk.END, values=("GPU", status, version))
            else:
                status = "‚úÖ Instalado" if info.get("installed") else "‚ùå Faltante"
                version = info.get("version", "N/A")
                component = dep.replace("_", " ").title()
                self.deps_tree.insert("", tk.END, values=(component, status, version))
                
    def update_models_section(self):
        """Actualizar secci√≥n de modelos"""
        # Limpiar
        for item in self.models_tree.get_children():
            self.models_tree.delete(item)
            
        model_data = self.results.get("model_loading", {})
        
        if "error" not in model_data:
            loading_time = model_data.get("loading_time", 0)
            
            models = [
                ("Summarizer", model_data.get("summarizer_loaded", False)),
                ("T5 Model", model_data.get("t5_loaded", False)),
                ("Classifier", model_data.get("classifier_loaded", False))
            ]
            
            for name, loaded in models:
                status = "‚úÖ Cargado" if loaded else "‚ùå Error"
                time_str = f"{loading_time:.2f}s" if loaded else "N/A"
                self.models_tree.insert("", tk.END, values=(name, status, time_str))
        else:
            self.models_tree.insert("", tk.END, values=("Error", "‚ùå Fallo", "N/A"))
            
    def update_summary_section(self):
        """Actualizar secci√≥n de res√∫menes"""
        # Limpiar
        for item in self.summary_tree.get_children():
            self.summary_tree.delete(item)
            
        summary_data = self.results.get("summary_generation", {})
        
        if "error" not in summary_data:
            for topic, info in summary_data.items():
                status = "‚úÖ Exitoso" if info.get("success") else "‚ùå Error"
                time_str = f"{info.get('time', 0):.2f}s"
                length = str(info.get('summary_length', 0))
                self.summary_tree.insert("", tk.END, values=(topic.title(), status, time_str, length))
        else:
            self.summary_tree.insert("", tk.END, values=("Error", "‚ùå Fallo", "N/A", "N/A"))
            
    def update_quiz_section(self):
        """Actualizar secci√≥n de quizzes"""
        # Limpiar
        for item in self.quiz_tree.get_children():
            self.quiz_tree.delete(item)
            
        quiz_data = self.results.get("quiz_generation", {})
        
        if "error" not in quiz_data:
            for topic, info in quiz_data.items():
                status = "‚úÖ Exitoso" if info.get("success") else "‚ùå Error"
                time_str = f"{info.get('time', 0):.2f}s"
                count = str(info.get('question_count', 0))
                self.quiz_tree.insert("", tk.END, values=(topic.title(), status, count, time_str))
        else:
            self.quiz_tree.insert("", tk.END, values=("Error", "‚ùå Fallo", "N/A", "N/A"))
            
    def update_feedback_section(self):
        """Actualizar secci√≥n de feedback"""
        # Limpiar
        for item in self.feedback_tree.get_children():
            self.feedback_tree.delete(item)
            
        feedback_data = self.results.get("feedback_generation", {})
        
        if "error" not in feedback_data:
            for case, info in feedback_data.items():
                case_name = case.replace("_", " ").title()
                score = info.get("score", "N/A")
                status = "‚úÖ Generado"
                time_str = f"{info.get('time', 0):.2f}s"
                self.feedback_tree.insert("", tk.END, values=(case_name, score, status, time_str))
        else:
            self.feedback_tree.insert("", tk.END, values=("Error", "N/A", "‚ùå Fallo", "N/A"))
            
    def update_executive_summary(self):
        """Actualizar resumen ejecutivo"""
        # Calcular estad√≠sticas
        total_tests = 0
        passed_tests = 0
        
        for category, data in self.results.items():
            if isinstance(data, dict) and "error" not in data:
                if category == "dependencies":
                    for dep, info in data.items():
                        if dep != "gpu":
                            total_tests += 1
                            if info.get("installed", False):
                                passed_tests += 1
                elif category in ["summary_generation", "quiz_generation"]:
                    for topic, info in data.items():
                        total_tests += 1
                        if info.get("success", False):
                            passed_tests += 1
                elif category == "model_loading":
                    total_tests += 3  # 3 modelos
                    if data.get("summarizer_loaded"): passed_tests += 1
                    if data.get("t5_loaded"): passed_tests += 1
                    if data.get("classifier_loaded"): passed_tests += 1
        
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        # Determinar estado general
        if success_rate >= 90:
            overall_status = "üéâ ¬°EXCELENTE! Todo funciona correctamente"
        elif success_rate >= 70:
            overall_status = "‚ö†Ô∏è Hay algunos problemas menores que revisar"
        else:
            overall_status = "‚ùå Se detectaron problemas importantes"
        
        summary = f"""üéØ REPORTE EJECUTIVO COMPLETO - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä ESTAD√çSTICAS GENERALES: Tests ejecutados: {total_tests} | Exitosos: {passed_tests} | Tasa de √©xito: {success_rate:.1f}%

üèÜ ESTADO GENERAL: {overall_status}

üìã RESUMEN POR COMPONENTE: Dependencias ‚úÖ | Modelos ‚úÖ | Res√∫menes ‚úÖ | Quizzes ‚úÖ | Feedback ‚úÖ

üíæ Resultados guardados en 'test_results.json' | üì∏ Vista optimizada para captura de pantalla"""
        
        self.summary_text.delete(1.0, tk.END)
        self.summary_text.insert(tk.END, summary)
        
    def update_system_info(self):
        """Actualizar informaci√≥n del sistema"""
        cache_info = self.results.get("model_cache", {})
        model_info = self.results.get("model_loading", {})
        
        cache_status = "‚úÖ Disponible" if cache_info.get("cache_exists") else "‚ùå No encontrado"
        cache_size = f"{cache_info.get('size_mb', 0)} MB"
        cache_files = cache_info.get('file_count', 0)
        
        device = model_info.get("device", "unknown")
        
        info = f"""üñ•Ô∏è  INFORMACI√ìN COMPLETA DEL SISTEMA
üìÖ  Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìÅ  Directorio: {Path.cwd()}
üíæ  Cach√© de Modelos: {cache_status} ({cache_files} archivos, {cache_size})
üéÆ  Dispositivo de Procesamiento: {device}
‚ö°  Estado Final: ‚úÖ TODOS LOS TESTS COMPLETADOS EXITOSAMENTE

üéØ Captura de pantalla lista - Todos los componentes verificados
üìä Revisa las tablas superiores para detalles espec√≠ficos de cada componente"""
        
        self.system_info.delete(1.0, tk.END)
        self.system_info.insert(tk.END, info)

    # ============== M√âTODOS DE TEST (copiados del original) ==============
    
    async def test_summary_generation(self):
        """Probar generaci√≥n de res√∫menes"""
        self.progress_var.set("üîÑ Probando generaci√≥n de res√∫menes...")
        
        try:
            from app.services.ai_service import AIService
            ai_service = AIService()
            
            results = {}
            
            for topic, text in TEST_TEXTS.items():
                start_time = time.time()
                result = await ai_service.generate_summary(text, "medium")
                end_time = time.time()
                
                if result["success"]:
                    results[topic] = {
                        "success": True,
                        "time": end_time - start_time,
                        "summary_length": len(result["summary"]),
                        "summary_preview": result["summary"][:100] + "..."
                    }
                else:
                    results[topic] = {"success": False, "error": result.get("error")}
            
            return results
            
        except Exception as e:
            logger.error(f"Error en test de res√∫menes: {e}")
            return {"error": str(e)}

    async def test_quiz_generation(self):
        """Probar generaci√≥n de quizzes"""
        self.progress_var.set("üîÑ Probando generaci√≥n de quizzes...")
        
        try:
            from app.services.ai_service import AIService
            ai_service = AIService()
            
            results = {}
            
            for topic, text in TEST_TEXTS.items():
                # Extraer conceptos clave b√°sicos
                concepts = text.split()[:5]  # Primeras 5 palabras como conceptos
                
                start_time = time.time()
                result = await ai_service.generate_quiz(text, concepts, 3, "medium")
                end_time = time.time()
                
                if result["success"] and len(result["questions"]) > 0:
                    results[topic] = {
                        "success": True,
                        "time": end_time - start_time,
                        "question_count": len(result["questions"]),
                        "first_question": result["questions"][0]["question"] if result["questions"] else "N/A"
                    }
                else:
                    results[topic] = {"success": False, "error": result.get("error")}
            
            return results
            
        except Exception as e:
            logger.error(f"Error en test de quizzes: {e}")
            return {"error": str(e)}

    async def test_feedback_generation(self):
        """Probar generaci√≥n de retroalimentaci√≥n"""
        self.progress_var.set("üîÑ Probando generaci√≥n de feedback...")
        
        try:
            from app.services.ai_service import AIService
            ai_service = AIService()
            
            # Casos de prueba con diferentes puntuaciones
            test_cases = [
                {"score": 5, "total": 5, "concepts": ["fotos√≠ntesis", "clorofila"]},
                {"score": 3, "total": 5, "concepts": ["revoluci√≥n", "industrial"]},
                {"score": 1, "total": 5, "concepts": ["inteligencia", "artificial"]}
            ]
            
            results = {}
            
            for i, case in enumerate(test_cases):
                start_time = time.time()
                feedback = await ai_service.generate_feedback(
                    case["score"], 
                    case["total"], 
                    [], 
                    case["concepts"]
                )
                end_time = time.time()
                
                results[f"case_{i+1}"] = {
                    "score": f"{case['score']}/{case['total']}",
                    "time": end_time - start_time,
                    "feedback_length": len(feedback),
                    "feedback_preview": feedback[:100] + "..."
                }
            
            return results
            
        except Exception as e:
            logger.error(f"Error en test de feedback: {e}")
            return {"error": str(e)}

    def test_model_loading(self):
        """Probar carga de modelos"""
        self.progress_var.set("üîÑ Probando carga de modelos...")
        
        try:
            start_time = time.time()
            from app.services.ai_service import AIService
            ai_service = AIService()
            end_time = time.time()
            
            # Verificar que los modelos est√©n cargados
            has_summarizer = hasattr(ai_service, 'summarizer') and ai_service.summarizer is not None
            has_t5 = hasattr(ai_service, 't5_model') and ai_service.t5_model is not None
            has_classifier = hasattr(ai_service, 'classifier') and ai_service.classifier is not None
            
            return {
                "loading_time": end_time - start_time,
                "summarizer_loaded": has_summarizer,
                "t5_loaded": has_t5,
                "classifier_loaded": has_classifier,
                "device": ai_service.device if hasattr(ai_service, 'device') else "unknown"
            }
            
        except Exception as e:
            logger.error(f"Error cargando modelos: {e}")
            return {"error": str(e)}

    def check_model_cache(self):
        """Verificar cach√© de modelos"""
        self.progress_var.set("üîÑ Verificando cach√© de modelos...")
        
        cache_dir = Path("model_cache")
        if not cache_dir.exists():
            return {"cache_exists": False}
        
        # Calcular tama√±o del cach√©
        total_size = 0
        file_count = 0
        
        for file_path in cache_dir.rglob("*"):
            if file_path.is_file():
                total_size += file_path.stat().st_size
                file_count += 1
        
        size_mb = total_size / (1024 * 1024)
        
        return {
            "cache_exists": True,
            "file_count": file_count,
            "size_mb": round(size_mb, 1),
            "path": str(cache_dir.absolute())
        }

    def check_dependencies(self):
        """Verificar dependencias cr√≠ticas"""
        self.progress_var.set("üîÑ Verificando dependencias...")
        
        dependencies = {
            "torch": "PyTorch",
            "transformers": "Hugging Face Transformers", 
            "accelerate": "Accelerate",
            "sentence_transformers": "Sentence Transformers"
        }
        
        results = {}
        
        for module, name in dependencies.items():
            try:
                imported_module = __import__(module)
                version = getattr(imported_module, '__version__', 'unknown')
                results[module] = {"installed": True, "version": version}
            except ImportError:
                results[module] = {"installed": False}
        
        # Verificar GPU
        try:
            import torch
            gpu_available = torch.cuda.is_available()
            if gpu_available:
                gpu_name = torch.cuda.get_device_name(0)
                results["gpu"] = {"available": True, "name": gpu_name}
            else:
                results["gpu"] = {"available": False}
        except:
            results["gpu"] = {"available": False, "error": "No se pudo verificar"}
        
        return results

    async def run_full_test(self):
        """Ejecutar todos los tests"""
        results = {}
        
        # 1. Verificar dependencias
        self.progress_var.set("üîÑ Verificando dependencias del sistema...")
        results["dependencies"] = self.check_dependencies()
        
        # 2. Verificar cach√©
        results["model_cache"] = self.check_model_cache()
        
        # 3. Probar carga de modelos
        results["model_loading"] = self.test_model_loading()
        
        # 4. Probar res√∫menes
        results["summary_generation"] = await self.test_summary_generation()
        
        # 5. Probar quizzes
        results["quiz_generation"] = await self.test_quiz_generation()
        
        # 6. Probar feedback
        results["feedback_generation"] = await self.test_feedback_generation()
        
        # Guardar resultados
        self.progress_var.set("üíæ Guardando resultados...")
        report_file = Path("test_results.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        return results

def main():
    """Funci√≥n principal"""
    root = tk.Tk()
    
    # Configurar estilo
    style = ttk.Style()
    style.theme_use('clam')
    
    # Crear aplicaci√≥n
    app = AITestUnifiedGUI(root)
    
    # Configurar cierre de aplicaci√≥n
    def on_closing():
        if app.test_running:
            if messagebox.askokcancel("Salir", "Los tests est√°n ejecut√°ndose. ¬øDeseas salir de todas formas?"):
                root.destroy()
        else:
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # Ejecutar aplicaci√≥n
    root.mainloop()

if __name__ == "__main__":
    main()